<!DOCTYPE html>
<html lang="ru">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>wasmFreeQueue test html page</title>
    <script type="module" src="nk-radio/index.mjs"></script>   
    <script type="module">
		import FreeQueue from "./free-queue/free-queue.js"
		import initWasmFreeQueue from "./free-queue/free-queue.asm.js"
		try {
			globalThis["Module"] = {};
			initWasmFreeQueue(globalThis["Module"]);
			globalThis["onFreeQueueInitialize"] = () => {
				const GetFreeQueueThreads = globalThis["Module"].cwrap('GetFreeQueueThreads','number',[ '' ]);
				const GetFreeQueuePointers = globalThis["Module"].cwrap('GetFreeQueuePointers','number',[ 'number', 'string' ]);
				const PrintQueueInfo = globalThis["Module"].cwrap('PrintQueueInfo','',[ 'number' ]);
				const CreateFreeQueue = globalThis["Module"].cwrap('CreateFreeQueue','number',[ 'number', 'number' ]);
				const PrintQueueAddresses = globalThis["Module"].cwrap('PrintQueueAddresses','',[ 'number' ]);
				globalThis["instance"] = GetFreeQueueThreads();
				const bufferLengthPtr = GetFreeQueuePointers( globalThis["instance"], "buffer_length" );
				const channelCountPtr = GetFreeQueuePointers( globalThis["instance"], "channel_count" );
				const statePtr = GetFreeQueuePointers( globalThis["instance"], "state" );
				const channelDataPtr = GetFreeQueuePointers( globalThis["instance"], "channel_data" );
				const pointers = new Object();
				pointers.memory = globalThis["Module"].HEAPU8;
				pointers.bufferLengthPointer = bufferLengthPtr;
				pointers.channelCountPointer = channelCountPtr;
				pointers.statePointer = statePtr;
				pointers.channelDataPointer = channelDataPtr;
				globalThis["queue"] = FreeQueue.fromPointers( pointers );
				if ( globalThis["queue"] != undefined ) globalThis["queue"].printAvailableReadAndWrite();
			};
			globalThis["Module"].onRuntimeInitialized = () => { 				
				globalThis["queue"] = undefined;
				globalThis["instance"] = undefined;
				globalThis["Module"].callMain("");
				globalThis.onFreeQueueInitialize();
			};
			const t1 = globalThis.document.getElementById("startTest1");
			t1.addEventListener( "click", async (e) => {
				const CreateFreeQueueThreads = globalThis["Module"].cwrap('CreateFreeQueueThreads','number',[ '' ]);
				const r = CreateFreeQueueThreads();
				if ( r == 1 ) {
					globalThis.onFreeQueueInitialize();
				}
			});
			const t2 = globalThis.document.getElementById("startTest2");
			t2.addEventListener( "click", async (e) => {
				const DestroyFreeQueueThreads = globalThis["Module"].cwrap('DestroyFreeQueueThreads','number',[ '' ]);
				const r = DestroyFreeQueueThreads();
				if ( r == 1 ) {
					globalThis["queue"] = undefined;
					globalThis["instance"] = undefined;
				}
			});
			const t3 = globalThis.document.getElementById("startTest3");
			t3.addEventListener( "click", async (e) => {
				const PrintQueueInfo = globalThis["Module"].cwrap('PrintQueueInfo','',[ 'number' ]);
				if ( globalThis["instance"] != undefined ) {	
					PrintQueueInfo( globalThis["instance"] );
					if ( globalThis["queue"] != undefined ) globalThis["queue"].printAvailableReadAndWrite();
				}
			});
			const t4 = globalThis.document.getElementById("startTest4");
			t4.addEventListener( "click", async (e) => {
				const PrintQueueInfo = globalThis["Module"].cwrap('PrintQueueInfo','',[ 'number' ]);
				const d = [2];
				let bufferSize = globalThis["samplerate"] / 25;
				d[0] = new Float64Array(bufferSize);
				d[1] = new Float64Array(bufferSize);
				if ( globalThis["queue"] != undefined ) {
					const r = globalThis["queue"].pull( d, bufferSize );
					console.log( "pull: " + r );
					console.log( "pull data: " + d );
					globalThis["queue"].printAvailableReadAndWrite();
				}
			});
			const t5 = globalThis.document.getElementById("startTest5");
			t5.addEventListener( "click", async (e) => {
				if ( globalThis["isPlaybackInProgress"] == false ) {
					globalThis.startplayback();
				}
			});
			const t6 = globalThis.document.getElementById("startTest6");
			t6.addEventListener( "click", async (e) => {
				if ( globalThis["isPlaybackInProgress"] == true ) {
					globalThis.stopplayback();
				}
			});
		} 
		catch( e ) 
		{
			console.log( "exception: " + e );
			throw( e );
		}
    </script>
</head>

<body>
	<audio id="audiostream" crossorigin="anonymous" preload="metadata" 
		src="https://hermitage.hostingradio.ru/hermitage128.mp3">��� ������� �� ������������ ������� <code>audio</code>.
	</audio>
	<div class="nk-radio"><slot name="nk-radio"></slot></div>
	<nk-radio slot="nk-radio" data-field="settings-2" data-services-path="webgpu"></nk-radio>
	<button id="startTest1">CreateThreads</button>
	<button id="startTest2">DestroyThreads</button>
	<button id="startTest3">PrintVarStack</button>
	<button id="startTest4">PullData</button>
	<button id="startTest5">StartPlayback</button>
	<button id="startTest6">StopPlayback</button>
</body>

</html>
